<scope ilk="blob" lang="JavaScript" name="Async.js">
      <variable citdl="Object" name="MochiKit">
        <variable citdl="Object" name="Async">
          <variable doc="Thrown by a Deferred if .callback or .errback are called&#xA;more than once." name="AlreadyCalledError" />
          <variable doc="Thrown when the JavaScript runtime is not capable of&#xA;performing the given function. Currently, this happens if&#xA;the browser does not support XMLHttpRequest." name="BrowserComplianceError" />
          <variable doc="Thrown by a Deferred when it is cancelled, unless a&#xA;canceller is present and throws something else." name="CancelledError" />
          <variable doc="Results passed to .fail or .errback of a Deferred are&#xA;wrapped by this Error if !(result instanceof Error)." name="GenericError" />
          <variable doc="Thrown when an XMLHttpRequest does not complete successfully&#xA;for any reason. The req property of the error is the failed&#xA;XMLHttpRequest object, and for convenience the number&#xA;property corresponds to req.status." name="XMLHttpRequestError" />
          <scope doc="Encapsulates a sequence of callbacks in response to a value&#xA;that may not yet be available. This is modeled after the&#xA;Deferred class from Twisted [3]." ilk="class" name="Deferred">
            <scope attributes="__ctor__" doc="Encapsulates a sequence of callbacks in response to a value&#xA;that may not yet be available. This is modeled after the&#xA;Deferred class from Twisted [3]." ilk="function" name="Deferred" signature="Deferred()" />
            <scope doc="Add the same function as both a callback and an errback as&#xA;the next element on the callback sequence. This is useful&#xA;for code that you want to guarantee to run, e.g." ilk="function" name="addBoth" signature="addBoth(func)" />
            <scope doc="Add a single callback to the end of the callback sequence.&#xA;If additional arguments are given, then func will be&#xA;replaced with MochiKit.Base.partial.apply(null, arguments)." ilk="function" name="addCallback" signature="addCallback(func[, ...])" />
            <scope doc="Add separate callback and errback to the end of the callback&#xA;sequence. Either callback or errback may be null, but not&#xA;both." ilk="function" name="addCallbacks" signature="addCallbacks(callback, errback)" />
            <scope doc="Add a single errback to the end of the callback sequence. If&#xA;additional arguments are given, then func will be replaced&#xA;with MochiKit.Base.partial.apply(null, arguments)." ilk="function" name="addErrback" signature="addErrback(func)" />
            <scope doc="Begin the callback sequence with a non-Error result. Result&#xA;may be any value except for a Deferred." ilk="function" name="callback" signature="callback([result])" />
            <scope doc="Cancels a Deferred that has not yet received a value, or is&#xA;waiting on another Deferred as its value. If a canceller is&#xA;defined, the canceller is called." ilk="function" name="cancel" signature="cancel()" />
            <scope doc="Begin the callback sequence with an error result. Result may&#xA;be any value except for a Deferred, but if !(result&#xA;instanceof Error), it will be wrapped with GenericError." ilk="function" name="errback" signature="errback([result])" />
          </scope>
          <scope doc="A lock for asynchronous systems. The locked property of a&#xA;DeferredLock will be true if it locked, false otherwise." ilk="class" name="DeferredLock">
            <scope attributes="__ctor__" doc="A lock for asynchronous systems. The locked property of a&#xA;DeferredLock will be true if it locked, false otherwise." ilk="function" name="DeferredLock" signature="DeferredLock()" />
            <scope doc="Attempt to acquire the lock. Returns a Deferred that fires&#xA;on lock acquisition with the DeferredLock as the value." ilk="function" name="acquire" signature="acquire()" />
            <scope doc="Release the lock. If there is a waiting list, then the first&#xA;Deferred in that waiting list will be called back." ilk="function" name="release" signature="release()" />
          </scope>
          <scope doc="Combine a list of Deferred into one. Track the callbacks and&#xA;return a list of (success, result) tuples, &apos;success&apos; being a&#xA;boolean indicating whether result is a normal result or an&#xA;error." ilk="class" name="DeferredList">
            <scope attributes="__ctor__" doc="Combine a list of Deferred into one. Track the callbacks and&#xA;return a list of (success, result) tuples, &apos;success&apos; being a&#xA;boolean indicating whether result is a normal result or an&#xA;error." ilk="function" name="DeferredList" signature="DeferredList(list, [fireOnOneCallback, fireOnOneErrback, consumeErrors, canceller])" />
          </scope>
          <scope doc="Call func(args...) after at least seconds seconds have&#xA;elapsed. This is a convenience method for: func =&#xA;partial.apply(extend(null, arguments, 1)); return&#xA;wait(seconds).addCallback(function (res) { return func() });&#xA;Returns a cancellable Deferred." ilk="function" name="callLater" signature="callLater(seconds, func[, args...])" />
          <scope doc="Perform a customized XMLHttpRequest and wrap it with a&#xA;Deferred that may be cancelled. Note that only 200 (OK), 201&#xA;(CREATED), 204 (NO CONTENT) and 304 (NOT MODIFIED) are&#xA;considered success codes." ilk="function" name="doXHR" returns="Deferred" signature="doXHR(url[, {option: value, ...}]) =&gt; Deferred" />
          <scope doc="Perform a simple XMLHttpRequest and wrap it with a Deferred&#xA;that may be cancelled. Note that only 200 (OK), 201&#xA;(CREATED), 204 (NO CONTENT) and 304 (NOT MODIFIED) are&#xA;considered success codes." ilk="function" name="doSimpleXMLHttpRequest" returns="Deferred" signature="doSimpleXMLHttpRequest(url[, queryArguments...]) =&gt; Deferred" />
          <scope doc="Evaluate a JSON [4] XMLHttpRequest req: The request whose&#xA;.responseText property is to be evaluated. If the JSON is&#xA;wrapped in a comment, the comment will be stripped before&#xA;evaluation." ilk="function" name="evalJSONRequest" signature="evalJSONRequest(req)" />
          <scope doc="Return a Deferred that has already had .errback(result)&#xA;called. See succeed documentation for rationale." ilk="function" name="fail" returns="Deferred" signature="fail([result]) =&gt; Deferred" />
          <scope doc="A convenience function that returns a DeferredList from the&#xA;given Array of Deferred instances that will callback with an&#xA;Array of just results when they&apos;re available, or errback on&#xA;the first array." ilk="function" name="gatherResults" signature="gatherResults(deferreds)" />
          <scope doc="Return an XMLHttpRequest compliant object for the current&#xA;platform." ilk="function" name="getXMLHttpRequest" returns="XMLHttpRequest" signature="getXMLHttpRequest() =&gt; XMLHttpRequest" />
          <scope doc="Call a func with the given arguments and ensure the result&#xA;is a Deferred. func: The function to call." ilk="function" name="maybeDeferred" returns="Deferred" signature="maybeDeferred(func[, argument...]) =&gt; Deferred" />
          <scope doc="Do a simple XMLHttpRequest to a URL and get the response as&#xA;a JSON [4] document. url: The URL to GET queryArguments: If&#xA;this function is called with more than one argument, a &quot;?&quot;&#xA;and the result of MochiKit.Base.queryString with the rest of&#xA;the arguments are appended to the URL." ilk="function" name="loadJSONDoc" returns="Deferred" signature="loadJSONDoc(url[, queryArguments...]) =&gt; Deferred" />
          <scope doc="Set an onreadystatechange handler on an XMLHttpRequest&#xA;object and send it off. Will return a cancellable Deferred&#xA;that will callback on success." ilk="function" name="sendXMLHttpRequest" returns="Deferred" signature="sendXMLHttpRequest(req[, sendContent]) =&gt; Deferred" />
          <scope doc="Return a Deferred that has already had .callback(result)&#xA;called. This is useful when you&apos;re writing synchronous code&#xA;to an asynchronous interface: i.e., some code is calling you&#xA;expecting a Deferred result, but you don&apos;t actually need to&#xA;do anything asynchronous." ilk="function" name="succeed" returns="Deferred" signature="succeed([result]) =&gt; Deferred" />
          <scope doc="Return a new cancellable Deferred that will .callback(res)&#xA;after at least seconds seconds have elapsed." ilk="function" name="wait" signature="wait(seconds[, res])" />
        </variable>
      </variable>
      <variable citdl="MochiKit.Async.AlreadyCalledError" name="AlreadyCalledError" />
      <variable citdl="MochiKit.Async.BrowserComplianceError" name="BrowserComplianceError" />
      <variable citdl="MochiKit.Async.CancelledError" name="CancelledError" />
      <variable citdl="MochiKit.Async.GenericError" name="GenericError" />
      <variable citdl="MochiKit.Async.XMLHttpRequestError" name="XMLHttpRequestError" />
      <variable citdl="MochiKit.Async.Deferred" name="Deferred" />
      <variable citdl="MochiKit.Async.addBoth" name="addBoth" />
      <variable citdl="MochiKit.Async.addCallback" name="addCallback" />
      <variable citdl="MochiKit.Async.addCallbacks" name="addCallbacks" />
      <variable citdl="MochiKit.Async.addErrback" name="addErrback" />
      <variable citdl="MochiKit.Async.callback" name="callback" />
      <variable citdl="MochiKit.Async.cancel" name="cancel" />
      <variable citdl="MochiKit.Async.errback" name="errback" />
      <variable citdl="MochiKit.Async.DeferredLock" name="DeferredLock" />
      <variable citdl="MochiKit.Async.acquire" name="acquire" />
      <variable citdl="MochiKit.Async.release" name="release" />
      <variable citdl="MochiKit.Async.DeferredList" name="DeferredList" />
      <variable citdl="MochiKit.Async.callLater" name="callLater" />
      <variable citdl="MochiKit.Async.doXHR" name="doXHR" />
      <variable citdl="MochiKit.Async.doSimpleXMLHttpRequest" name="doSimpleXMLHttpRequest" />
      <variable citdl="MochiKit.Async.evalJSONRequest" name="evalJSONRequest" />
      <variable citdl="MochiKit.Async.fail" name="fail" />
      <variable citdl="MochiKit.Async.gatherResults" name="gatherResults" />
      <variable citdl="MochiKit.Async.getXMLHttpRequest" name="getXMLHttpRequest" />
      <variable citdl="MochiKit.Async.maybeDeferred" name="maybeDeferred" />
      <variable citdl="MochiKit.Async.loadJSONDoc" name="loadJSONDoc" />
      <variable citdl="MochiKit.Async.sendXMLHttpRequest" name="sendXMLHttpRequest" />
      <variable citdl="MochiKit.Async.succeed" name="succeed" />
      <variable citdl="MochiKit.Async.wait" name="wait" />
    </scope>
  