<scope doc="# This module exists to create the &quot;best&quot; dispatch object for a given # object.  If &quot;makepy&quot; support for a given object is detected, it is # used, otherwise a dynamic dispatch object." ilk="blob" lang="Python" name="win32com.client">
      <scope classrefs="CDispatch" doc="The dynamic class used as a last resort. The purpose of this overriding of dynamic.CDispatch is to perpetuate the policy of using the makepy generated wrapper Python class instead of dynamic.CDispatch" ilk="class" line="116" lineend="125" name="CDispatch">
        <scope attributes="protected" ilk="function" line="123" lineend="125" name="_wrap_dispatch_" returns="Dispatch()" signature="_wrap_dispatch_(ob, userName=None, returnCLSID=None, UnicodeToString=None)">
          <variable citdl="CDispatch" ilk="argument" name="self" />
          <variable ilk="argument" name="ob" />
          <variable ilk="argument" name="userName" />
          <variable ilk="argument" name="returnCLSID" />
          <variable ilk="argument" name="UnicodeToString" />
        </scope>
      </scope>
      <import module="CLSIDToClass" />
      <scope doc="&apos;Cast&apos; a COM object to another interface" ilk="function" line="127" lineend="159" name="CastTo" returns="CastTo.target_class()" signature="CastTo(ob, target)">
        <variable ilk="argument" name="target" />
        <variable citdl="gencache.EnsureDispatch()" ilk="argument" name="ob" />
        <variable citdl="mod.NamesToIIDMap.get()" line="150" name="target_clsid" />
        <variable citdl="ob.CLSID" line="137" name="clsid" />
        <variable citdl="getattr()" line="155" name="target_class" />
        <variable citdl="gencache.GetModuleForCLSID()" line="145" name="mod" />
      </scope>
      <scope ilk="class" line="493" lineend="513" name="CoClassBaseClass">
        <scope ilk="function" line="504" lineend="513" name="__setattr__" signature="__setattr__(attr, value)">
          <variable citdl="CoClassBaseClass" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="value" />
          <variable line="507" name="d" />
        </scope>
        <scope ilk="function" line="497" lineend="498" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="CoClassBaseClass" ilk="argument" name="self" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="494" lineend="496" name="__init__" signature="CoClassBaseClass(oobj=None)">
          <variable citdl="CoClassBaseClass" ilk="argument" name="self" />
          <variable citdl="pythoncom.new()" ilk="argument" name="oobj" />
        </scope>
        <scope ilk="function" line="500" lineend="503" name="__getattr__" returns="getattr()" signature="__getattr__(attr)">
          <variable citdl="CoClassBaseClass" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable line="501" name="d" />
        </scope>
      </scope>
      <scope doc="A container for generated COM constants." ilk="class" name="Constants" />
      <scope doc="Creates a Dispatch based COM object." ilk="function" line="91" lineend="96" name="Dispatch" returns="__WrapDispatch()" signature="Dispatch(dispatch, userName=None, resultCLSID=None, typeinfo=None, UnicodeToString=None, clsctx=21)">
        <variable ilk="argument" name="userName" />
        <variable ilk="argument" name="typeinfo" />
        <variable ilk="argument" name="resultCLSID" />
        <variable ilk="argument" name="dispatch" />
        <variable citdl="pythoncom.CLSCTX_SERVER" ilk="argument" name="clsctx" />
        <variable ilk="argument" name="UnicodeToString" />
      </scope>
      <scope doc="############################################ # The base of all makepy generated classes ############################################" ilk="class" line="417" lineend="475" name="DispatchBaseClass">
        <scope ilk="function" line="450" lineend="452" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable citdl="getattr()" ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="465" lineend="471" name="__setattr__" signature="__setattr__(attr, value)">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope attributes="protected" ilk="function" line="474" lineend="475" name="_get_good_object_" returns="DispatchBaseClass._get_good_object_()" signature="_get_good_object_(obj, obUserName=None, resultCLSID=None)">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="obUserName" />
          <variable ilk="argument" name="resultCLSID" />
        </scope>
        <scope ilk="function" line="459" lineend="463" name="__getattr__" returns="DispatchBaseClass._ApplyTypes_()" signature="__getattr__(attr)">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable citdl="self._prop_map_get_.get()" line="460" name="args" />
        </scope>
        <scope ilk="function" line="434" lineend="444" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable line="437" name="mod_doc" />
          <variable citdl="str" line="439" name="mod_name" />
        </scope>
        <scope attributes="protected" ilk="function" line="472" lineend="473" name="_get_good_single_object_" returns="DispatchBaseClass._get_good_single_object_()" signature="_get_good_single_object_(obj, obUserName=None, resultCLSID=None)">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable ilk="argument" name="obj" />
          <variable ilk="argument" name="obUserName" />
          <variable ilk="argument" name="resultCLSID" />
        </scope>
        <scope attributes="protected" ilk="function" line="454" lineend="457" name="_ApplyTypes_" returns="self._get_good_object_()" signature="_ApplyTypes_(dispid, wFlags, retType, argTypes, user, resultCLSID, *args)">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable ilk="argument" name="dispid" />
          <variable ilk="argument" name="wFlags" />
          <variable ilk="argument" name="retType" />
          <variable ilk="argument" name="argTypes" />
          <variable ilk="argument" name="user" />
          <variable ilk="argument" name="resultCLSID" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="446" lineend="448" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable citdl="getattr()" ilk="argument" name="other" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="418" lineend="432" name="__init__" signature="DispatchBaseClass(oobj=None)">
          <import line="425" module="winerror" />
          <variable citdl="DispatchBaseClass" ilk="argument" name="self" />
          <variable citdl="oobj._oleobj_.QueryInterface()" ilk="argument" name="oobj" />
        </scope>
      </scope>
      <scope doc="Creates a Dispatch based COM object on a specific machine." ilk="function" line="98" lineend="114" name="DispatchEx" returns="Dispatch()" signature="DispatchEx(clsid, machine=None, userName=None, resultCLSID=None, typeinfo=None, UnicodeToString=None, clsctx=None)">
        <variable ilk="argument" name="userName" />
        <variable ilk="argument" name="typeinfo" />
        <variable ilk="argument" name="resultCLSID" />
        <variable line="113" name="dispatch" />
        <variable citdl="int" ilk="argument" name="clsctx" />
        <variable ilk="argument" name="machine" />
        <variable ilk="argument" name="clsid" />
        <variable ilk="argument" name="UnicodeToString" />
        <variable citdl="tuple" line="109" name="serverInfo" />
      </scope>
      <scope doc="Create a COM object that can fire events to a user defined class." ilk="function" line="205" lineend="276" name="DispatchWithEvents" returns="EventsProxy" signature="DispatchWithEvents(clsid, user_event_class)">
        <variable citdl="Dispatch()" line="245" name="disp" />
        <variable ilk="argument" name="user_event_class" />
        <variable citdl="getevents()" line="268" name="events_class" />
        <variable citdl="result_class()" line="272" name="instance" />
        <variable citdl="new_type()" line="271" name="result_class" />
        <variable citdl="gencache.GetClassForProgID()" line="254" name="disp_class" />
        <variable line="249" name="disp_clsid" />
        <variable citdl="type" line="267" name="new_type" />
        <variable citdl="tlb.GetLibAttr()" line="251" name="tla" />
        <variable citdl="disp_class.CLSID" ilk="argument" name="clsid" />
        <variable citdl="disp._oleobj_.GetTypeInfo()" line="248" name="ti" />
      </scope>
      <scope doc="# An instance of this &quot;proxy&quot; is created to break the COM circular references # that exist (ie, when we connect to the COM events, COM keeps a reference # to the object.  Thus, the Event connection must be manually broken before" ilk="class" line="190" lineend="203" name="EventsProxy">
        <scope ilk="function" line="193" lineend="199" name="__del__" signature="__del__()">
          <variable citdl="EventsProxy" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="202" lineend="203" name="__setattr__" signature="__setattr__(attr, val)">
          <variable citdl="EventsProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable ilk="argument" name="val" />
        </scope>
        <scope ilk="function" line="200" lineend="201" name="__getattr__" returns="getattr()" signature="__getattr__(attr)">
          <variable citdl="EventsProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="191" lineend="192" name="__init__" signature="EventsProxy(ob)">
          <variable citdl="EventsProxy" ilk="argument" name="self" />
          <variable ilk="argument" name="ob" />
        </scope>
      </scope>
      <scope doc="Python friendly version of GetObject&apos;s ProgID/CLSID functionality." ilk="function" line="74" lineend="81" name="GetActiveObject" returns="__WrapDispatch()" signature="GetActiveObject(Class, clsctx=23)">
        <variable ilk="argument" name="Class" />
        <variable citdl="pythoncom.CLSCTX_ALL" ilk="argument" name="clsctx" />
        <variable citdl="pythoncom.GetActiveObject()" line="79" name="dispatch" />
        <variable citdl="pywintypes.IID()" line="78" name="resultCLSID" />
      </scope>
      <scope doc="Mimic VB&apos;s GetObject() function." ilk="function" line="46" lineend="72" name="GetObject" returns="GetActiveObject()" signature="GetObject(Pathname=None, Class=None, clsctx=None)">
        <variable ilk="argument" name="Pathname" />
        <variable ilk="argument" name="Class" />
        <variable citdl="pythoncom.CLSCTX_ALL" ilk="argument" name="clsctx" />
      </scope>
      <scope doc="Python friendly version of GetObject&apos;s moniker functionality." ilk="function" line="83" lineend="89" name="Moniker" returns="__WrapDispatch()" signature="Moniker(Pathname, clsctx=23)">
        <variable ilk="argument" name="Pathname" />
        <variable citdl="pythoncom.CLSCTX_ALL" ilk="argument" name="clsctx" />
        <variable citdl="moniker.BindToObject()" line="88" name="dispatch" />
      </scope>
      <scope doc="Creates a new record object, given the name of the record, and an object from the same type library." ilk="function" line="386" lineend="411" name="Record" returns="pythoncom.GetRecordFromGuids()" signature="Record(name, object)">
        <variable line="408" name="struct_guid" />
        <variable citdl="gencache.EnsureDispatch()" ilk="argument" name="object" />
        <variable ilk="argument" name="name" />
        <variable line="400" name="module" />
        <variable citdl="gencache.GetModuleForTypelib()" line="406" name="package" />
      </scope>
      <scope doc="Similar to DispatchWithEvents - except that the returned object is *not* also usable as the original Dispatch object - that is the returned object is not dispatchable." ilk="function" line="278" lineend="328" name="WithEvents" returns="result_class()" signature="WithEvents(disp, user_event_class)">
        <variable citdl="Dispatch()" ilk="argument" name="disp" />
        <variable ilk="argument" name="user_event_class" />
        <variable citdl="getevents()" line="321" name="events_class" />
        <variable citdl="new.classobj()" line="324" name="result_class" />
        <variable citdl="gencache.GetClassForProgID()" line="311" name="disp_class" />
        <variable line="306" name="disp_clsid" />
        <variable citdl="result_class()" line="325" name="instance" />
        <variable citdl="tlb.GetLibAttr()" line="308" name="tla" />
        <variable citdl="disp_class.CLSID" line="317" name="clsid" />
        <variable citdl="disp._oleobj_.GetTypeInfo()" line="305" name="ti" />
      </scope>
      <import module="build" />
      <variable citdl="Constants" line="173" name="constants" />
      <scope doc="A container for generated COM constants." ilk="class" line="161" lineend="170" name="Constants">
        <variable attributes="__instancevar__" citdl="list" line="165" name="__dicts__" />
        <scope ilk="function" line="166" lineend="170" name="__getattr__" signature="__getattr__(a)">
          <variable citdl="Constants" ilk="argument" name="self" />
          <variable ilk="argument" name="a" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="164" lineend="165" name="__init__" signature="Constants()">
          <variable citdl="Constants" ilk="argument" name="self" />
        </scope>
      </scope>
      <import module="dynamic" />
      <import module="gencache" />
      <scope doc="Determine the default outgoing interface for a class, given either a clsid or progid." ilk="function" line="330" lineend="383" name="getevents" returns="klass.default_source" signature="getevents(clsid)">
        <variable citdl="gencache.GetClassForCLSID()" line="375" name="klass" />
        <variable citdl="str()" ilk="argument" name="clsid" />
      </scope>
      <import module="pythoncom" />
      <import module="pywintypes" />
      <import module="sys" />
      <scope attributes="protected __hidden__" ilk="function" line="177" lineend="183" name="_event_setattr_" signature="_event_setattr_(self, attr, val)">
        <variable ilk="argument" name="self" />
        <variable ilk="argument" name="attr" />
        <variable ilk="argument" name="val" />
      </scope>
      <scope attributes="private __hidden__" doc="Helper function to return a makepy generated class for a CLSID if it exists, otherwise cope by using CDispatch." ilk="function" line="18" lineend="43" name="__WrapDispatch" returns="__WrapDispatch.klass()" signature="__WrapDispatch(dispatch, userName=None, resultCLSID=None, typeinfo=None, UnicodeToString=None, clsctx=pythoncom.CLSCTX_SERVER, WrapperClass=None)">
        <import line="34" module="gencache" />
        <variable ilk="argument" name="dispatch" />
        <variable ilk="argument" name="userName" />
        <variable citdl="str()" ilk="argument" name="resultCLSID" />
        <variable citdl="dispatch.GetTypeInfo()" ilk="argument" name="typeinfo" />
        <variable ilk="argument" name="UnicodeToString" />
        <variable citdl="pythoncom.CLSCTX_SERVER" ilk="argument" name="clsctx" />
        <variable citdl="CDispatch" ilk="argument" name="WrapperClass" />
        <variable citdl="gencache.GetClassForCLSID()" line="37" name="klass" />
      </scope>
      <scope attributes="protected __hidden__" ilk="function" line="483" lineend="491" name="_get_good_object_" returns="tuple()" signature="_get_good_object_(obj, obUserName=None, resultCLSID=None)">
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="obUserName" />
        <variable ilk="argument" name="resultCLSID" />
        <variable citdl="len()" line="487" name="obUserNameTuple" />
        <variable citdl="len()" line="488" name="resultCLSIDTuple" />
      </scope>
      <variable attributes="protected __hidden__" line="15" name="_PyIDispatchType" />
      <scope attributes="protected __hidden__" ilk="function" line="478" lineend="481" name="_get_good_single_object_" returns="Dispatch()" signature="_get_good_single_object_(obj, obUserName=None, resultCLSID=None)">
        <variable ilk="argument" name="obj" />
        <variable ilk="argument" name="obUserName" />
        <variable ilk="argument" name="resultCLSID" />
      </scope>
    </scope>
    