<scope ilk="blob" lang="JavaScript" name="Visual.js">
      <variable citdl="Object" name="MochiKit">
        <variable citdl="Object" name="Visual">
          <scope doc="Rounds all of the elements that match the tagName and&#xA;className specifiers, using the options provided. tagName or&#xA;className can be null to match all tags or classes." ilk="function" name="roundClass" signature="roundClass(tagName[, className[, options]])" />
          <scope doc="Immediately round the corners of the specified element.&#xA;element: An element ID string or a DOM node (see&#xA;MochiKit.DOM.getElement)." ilk="function" name="roundElement" signature="roundElement(element[, options])" />
          <scope doc="Toggle an element between visible and invisible state using&#xA;an effect. element: An element ID string or a DOM node (see&#xA;MochiKit.DOM.getElement)." ilk="function" name="toggle" signature="toggle(element[, effect[, options]])" />
          <scope doc="Transform the node text into SPAN nodes each containing a&#xA;single letter. Only text nodes that are immediate children&#xA;will be modified by this function." ilk="function" name="tagifyText" signature="tagifyText(element[, tagifyStyle])" />
          <scope doc="Launch the same effect on a list of elements. elements: A&#xA;list of element ID strings or a DOM nodes (see&#xA;MochiKit.DOM.getElement)." ilk="function" name="multiple" signature="multiple(elements, effect[, options])" />
          <scope doc="Fades an element using the Opacity effect. Once the effect&#xA;has completed, the element will be hidden with&#xA;MochiKit.Style.hideElement and the original element opacity&#xA;will be restored." ilk="function" name="fade" signature="fade(element[, options])" />
          <scope doc="Slowly shows an element using the Opacity effect. If the&#xA;element has &quot;display: none&quot; style, it will be changed to&#xA;&quot;display: block&quot; with MochiKit.Style.showElement." ilk="function" name="appear" signature="appear(element [, options])" />
          <scope doc="Make an element double size while also fading it using the&#xA;Scale and Opacity effects in parallel. Once the effect has&#xA;completed, the element will be hidden with&#xA;MochiKit.Style.hideElement and the original element size,&#xA;position and opacity will be restored." ilk="function" name="puff" signature="puff(element [, options])" />
          <scope doc="Blind an element up, changing its vertical size to 0 using&#xA;the Scale effect. Once the effect has completed, the element&#xA;will be hidden with MochiKit.Style.hideElement and the&#xA;original element size will be restored." ilk="function" name="blindUp" signature="blindUp(element [, options])" />
          <scope doc="Blind an element down, restoring its vertical size using the&#xA;Scale effect. If the element has &quot;display: none&quot; style, it&#xA;will be changed to &quot;display: block&quot; with&#xA;MochiKit.Style.showElement." ilk="function" name="blindDown" signature="blindDown(element [, options])" />
          <scope doc="A switch-off like effect, making the element disappear,&#xA;using the Opacity and Scale effects in sequence. The initial&#xA;Opacity effect uses a flicker (partially random)&#xA;transformation." ilk="function" name="switchOff" signature="switchOff(element [, options])" />
          <scope doc="Make the element fall and fade using the Move and Opacity&#xA;effects in parallel. Once the effect has completed, the&#xA;element will be hidden with MochiKit.Style.hideElement and&#xA;the original element position and opacity will be restored." ilk="function" name="dropOut" signature="dropOut(element [, options])" />
          <scope doc="Shake an element from left to right using a sequence of six&#xA;Move effects. Once the effect has completed, the original&#xA;element position will be restored." ilk="function" name="shake" signature="shake(element [, options])" />
          <scope doc="Slide an element down using the Scale effect. The element&#xA;must have a fixed height and contain a single child." ilk="function" name="slideDown" signature="slideDown(element [, options])" />
          <scope doc="Slide an element up using the Scale effect. The element must&#xA;have a fixed height and contain a single child." ilk="function" name="slideUp" signature="slideUp(element [, options])" />
          <scope doc="Reduce the horizontal and vertical sizes at the same time&#xA;using a single Scale effect. The result is similar to the&#xA;shrink effect with a top-left value for the direction&#xA;option." ilk="function" name="squish" signature="squish(element [, options])" />
          <scope doc="Grows an element size using Scale, Move and Opacity effects&#xA;in parallel. The element should have fixed width, height and&#xA;top-left position." ilk="function" name="grow" signature="grow(element [, options])" />
          <scope doc="Shrinks an element using Scale, Move and Opacity effects in&#xA;parallel. The element should have fixed width, height and&#xA;top-left position." ilk="function" name="shrink" signature="shrink(element [, options])" />
          <scope doc="Switches the element visibility using a pulsating Opacity&#xA;effect. The effect both starts and ends with a 0 opacity&#xA;value." ilk="function" name="pulsate" signature="pulsate(element [, options])" />
          <scope doc="Reduce first the element vertical size, and then the&#xA;horizontal size using two Scale effects in sequence. The&#xA;element should have both fixed width and height." ilk="function" name="fold" signature="fold(element [, options])" />
          <variable doc="Default transition functions available for all effects. A&#xA;transition function adjusts the current position value&#xA;between 0 and 1 in order to achieve a non-linear sequence of&#xA;position values for the effect." name="Transitions" />
          <variable doc="Default options for all effects. Note that all effects&#xA;inherit the Base class and thereby also support a number of&#xA;events that can be specified as callback functions among the&#xA;effect options." name="DefaultOptions" />
          <scope doc="Base class to all effects. Define a basic looping service,&#xA;use it for creating new effects." ilk="function" name="Base" signature="Base()" />
          <scope doc="Launch a list of effects in parallel. effects: An array of&#xA;instantiated effect objects." ilk="function" name="Parallel" signature="Parallel(effects [, options])" />
          <scope doc="Launch a list of effects in sequence, one after the other.&#xA;effects: An array of instantiated effect objects." ilk="function" name="Sequence" signature="Sequence(effects [, options])" />
          <scope doc="Change the opacity of an element progressively. element: An&#xA;element ID string or a DOM node (see&#xA;MochiKit.DOM.getElement)." ilk="function" name="Opacity" signature="Opacity(element [, options])" />
          <scope doc="Changes the (top left) position of an element in small&#xA;steps, creating a moving effect. element: An element ID&#xA;string or a DOM node (see MochiKit.DOM.getElement)." ilk="function" name="Move" signature="Move(element [, options])" />
          <scope doc="Changes the size of an element. element: An element ID&#xA;string or a DOM node (see MochiKit.DOM.getElement)." ilk="function" name="Scale" signature="Scale(element, percent [, options])" />
          <scope doc="Highlights an element by flashing the background color. The&#xA;color is first set to the startcolor and is then slowly&#xA;morphed into the endcolor, normally the original background&#xA;color of the element." ilk="function" name="Highlight" signature="Highlight(element [, options])" />
          <scope doc="Scroll the window to the position of the given element. Note&#xA;that this effect only scrolls the top window and not any&#xA;parent elements with scrollbars due to &quot;overflow: auto&quot;&#xA;style." ilk="function" name="ScrollTo" signature="ScrollTo(element [, options])" />
          <scope doc="Make a transformation to the given element. It&apos;s called with&#xA;the option style with an array holding the styles to change." ilk="function" name="Morph" signature="Morph(element [, options])" />
        </variable>
      </variable>
      <variable citdl="MochiKit.Visual.roundClass" name="roundClass" />
      <variable citdl="MochiKit.Visual.roundElement" name="roundElement" />
      <variable citdl="MochiKit.Visual.toggle" name="toggle" />
      <variable citdl="MochiKit.Visual.tagifyText" name="tagifyText" />
      <variable citdl="MochiKit.Visual.multiple" name="multiple" />
      <variable citdl="MochiKit.Visual.fade" name="fade" />
      <variable citdl="MochiKit.Visual.appear" name="appear" />
      <variable citdl="MochiKit.Visual.puff" name="puff" />
      <variable citdl="MochiKit.Visual.blindUp" name="blindUp" />
      <variable citdl="MochiKit.Visual.blindDown" name="blindDown" />
      <variable citdl="MochiKit.Visual.switchOff" name="switchOff" />
      <variable citdl="MochiKit.Visual.dropOut" name="dropOut" />
      <variable citdl="MochiKit.Visual.shake" name="shake" />
      <variable citdl="MochiKit.Visual.slideDown" name="slideDown" />
      <variable citdl="MochiKit.Visual.slideUp" name="slideUp" />
      <variable citdl="MochiKit.Visual.squish" name="squish" />
      <variable citdl="MochiKit.Visual.grow" name="grow" />
      <variable citdl="MochiKit.Visual.shrink" name="shrink" />
      <variable citdl="MochiKit.Visual.pulsate" name="pulsate" />
      <variable citdl="MochiKit.Visual.fold" name="fold" />
      <variable citdl="MochiKit.Visual.Transitions" name="Transitions" />
      <variable citdl="MochiKit.Visual.DefaultOptions" name="DefaultOptions" />
      <variable citdl="MochiKit.Visual.Base" name="Base" />
      <variable citdl="MochiKit.Visual.Parallel" name="Parallel" />
      <variable citdl="MochiKit.Visual.Sequence" name="Sequence" />
      <variable citdl="MochiKit.Visual.Opacity" name="Opacity" />
      <variable citdl="MochiKit.Visual.Move" name="Move" />
      <variable citdl="MochiKit.Visual.Scale" name="Scale" />
      <variable citdl="MochiKit.Visual.Highlight" name="Highlight" />
      <variable citdl="MochiKit.Visual.ScrollTo" name="ScrollTo" />
      <variable citdl="MochiKit.Visual.Morph" name="Morph" />
    </scope>
  