<scope doc="win32timezone:         Module for handling datetime.tzinfo time zones using the windows registry for time zone information.  The time zone names are dependent" ilk="blob" lang="Python3" name="win32timezone">
      <variable citdl="DLLHandleCache" line="707" name="DLLCache" />
      <scope classrefs="object" ilk="class" line="699" lineend="705" name="DLLHandleCache">
        <variable attributes="private __instancevar__" citdl="dict" line="701" name="__cache" />
        <scope ilk="function" line="703" lineend="705" name="__getitem__" returns="self.__cache.setdefault()" signature="__getitem__(filename)">
          <variable citdl="DLLHandleCache" ilk="argument" name="self" />
          <variable ilk="argument" name="filename" />
          <variable citdl="filename.lower()" line="704" name="key" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="700" lineend="701" name="__init__" signature="DLLHandleCache()">
          <variable citdl="DLLHandleCache" ilk="argument" name="self" />
        </scope>
      </scope>
      <scope classrefs="_SimpleStruct" ilk="class" line="237" lineend="240" name="DYNAMIC_TIME_ZONE_INFORMATION">
        <variable attributes="protected" citdl="list" line="238" name="_fields_" />
      </scope>
      <scope doc="Get the names of the registry keys indexed by a value in that key." ilk="function" line="665" name="GetIndexedTimeZoneNames" signature="GetIndexedTimeZoneNames(*args, **kwargs)" />
      <scope doc="Return a list of time zone names that can be used to initialize TimeZoneInfo instances" ilk="function" line="666" name="GetSortedTimeZoneNames" signature="GetSortedTimeZoneNames(*args, **kwargs)" />
      <scope doc="Run a few known tests to determine the capabilities of the time zone database on this machine." ilk="function" line="687" lineend="696" name="GetTZCapabilities" returns="vars()" signature="GetTZCapabilities()">
        <variable citdl="TimeZoneInfo" line="692" name="tzi" />
        <variable citdl="bool" line="694" name="DynamicTZSupport" />
        <variable citdl="bool" line="693" name="MissingTZPatch" />
      </scope>
      <scope doc="Returns the names of the (registry keys of the) time zones" ilk="function" line="664" name="GetTimeZoneNames" signature="GetTimeZoneNames(*args, **kwargs)" />
      <scope classrefs="int" ilk="class" line="812" lineend="814" name="RangeItem">
        <scope ilk="function" line="813" lineend="814" name="__new__" returns="int.__new__()" signature="__new__(value)">
          <variable citdl="RangeItem" ilk="argument" name="cls" />
          <variable ilk="argument" name="value" />
        </scope>
      </scope>
      <scope classrefs="RangeItem" ilk="class" line="815" lineend="817" name="RangeItemFirst">
        <scope ilk="function" line="816" lineend="817" name="__new__" returns="RangeItem.__new__()" signature="__new__()">
          <variable citdl="RangeItemFirst" ilk="argument" name="cls" />
        </scope>
      </scope>
      <scope classrefs="RangeItem" ilk="class" line="818" lineend="820" name="RangeItemLast">
        <scope ilk="function" line="819" lineend="820" name="__new__" returns="RangeItem.__new__()" signature="__new__()">
          <variable citdl="RangeItemLast" ilk="argument" name="cls" />
        </scope>
      </scope>
      <scope classrefs="dict" doc="A dictionary-like object that uses the keys as bounds for a range. Inclusion of the value for that range is determined by the keyMatchComparator, which defaults to greater-than-or-equal." ilk="class" line="740" lineend="809" name="RangeMap">
        <variable attributes="__instancevar__" line="780" name="sort" />
        <scope ilk="function" line="789" lineend="797" name="__getitem__" returns="()" signature="__getitem__(item)">
          <variable citdl="RangeMap" ilk="argument" name="self" />
          <variable ilk="argument" name="item" />
          <variable citdl="_get_sorted_keys()" line="790" name="sortedKeys" />
          <variable citdl="dict.__getitem__()" line="792" name="result" />
          <variable citdl="self._find_first_match_()" line="794" name="key" />
        </scope>
        <scope ilk="function" line="807" lineend="809" name="bounds" returns="tuple" signature="bounds()">
          <variable citdl="RangeMap" ilk="argument" name="self" />
          <variable citdl="_get_sorted_keys()" line="808" name="sortedKeys" />
        </scope>
        <scope attributes="protected" ilk="function" line="799" lineend="805" name="_find_first_match_" signature="_find_first_match_(keys, item)">
          <variable citdl="RangeMap" ilk="argument" name="self" />
          <variable ilk="argument" name="keys" />
          <variable ilk="argument" name="item" />
          <variable line="800" name="is_match" />
          <variable citdl="list" line="802" name="matches" />
        </scope>
        <scope attributes="protected" ilk="function" line="783" lineend="787" name="_get_sorted_keys" returns="list()" signature="_get_sorted_keys()">
          <variable citdl="RangeMap" ilk="argument" name="self" />
          <variable citdl="list()" line="784" name="sortedKeys" />
          <variable citdl="bool" line="785" name="reverse" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="778" lineend="781" name="__init__" signature="RangeMap(source, keySortComparator=ascending, keyMatchComparator=operator.le)">
          <variable citdl="RangeMap" ilk="argument" name="self" />
          <variable ilk="argument" name="source" />
          <variable ilk="argument" name="keySortComparator" />
          <variable citdl="operator.le" ilk="argument" name="keyMatchComparator" />
        </scope>
        <variable attributes="__instancevar__" citdl="operator.le" line="781" name="match" />
      </scope>
      <scope classrefs="object" ilk="class" line="811" lineend="811" name="RangeValueUndefined" />
      <scope classrefs="_SimpleStruct" ilk="class" line="214" lineend="223" name="SYSTEMTIME">
        <variable attributes="protected" citdl="list" line="215" name="_fields_" />
      </scope>
      <scope classrefs="_SimpleStruct" ilk="class" line="226" lineend="234" name="TIME_ZONE_INFORMATION">
        <variable attributes="protected" citdl="list" line="227" name="_fields_" />
      </scope>
      <scope classrefs="DYNAMIC_TIME_ZONE_INFORMATION" doc="A time zone definition class based on the win32 DYNAMIC_TIME_ZONE_INFORMATION structure. " ilk="class" line="244" lineend="367" name="TimeZoneDefinition">
        <scope attributes="private" ilk="function" line="280" lineend="289" name="__init_from_bytes" signature="__init_from_bytes(bytes, standard_name=&apos;&apos;, daylight_name=&apos;&apos;, key_name=&apos;&apos;, daylight_disabled=False)">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
          <variable ilk="argument" name="bytes" />
          <variable citdl="str" ilk="argument" name="standard_name" />
          <variable citdl="str" ilk="argument" name="daylight_name" />
          <variable citdl="str" ilk="argument" name="key_name" />
          <variable citdl="False" ilk="argument" name="daylight_disabled" />
          <variable citdl="str" line="281" name="format" />
          <variable citdl="struct.unpack()" line="282" name="components" />
          <variable citdl="SYSTEMTIME" line="284" name="standard_start" />
          <variable citdl="SYSTEMTIME" line="285" name="daylight_start" />
        </scope>
        <scope ilk="function" line="315" lineend="317" name="set" signature="set()">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
          <variable citdl="tuple()" line="316" name="tzi" />
        </scope>
        <scope ilk="function" line="323" lineend="324" name="locate_daylight_start" returns="self._locate_day()" signature="locate_daylight_start(year)">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
        </scope>
        <scope attributes="private" ilk="function" line="291" lineend="297" name="__init_from_other" signature="__init_from_other(other)">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
          <variable line="296" name="value" />
        </scope>
        <scope ilk="function" line="302" lineend="307" name="__getattribute__" returns="make_minute_timedelta()" signature="__getattribute__(attr)">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
          <variable ilk="argument" name="attr" />
          <variable citdl="make_minute_timedelta()" line="303" name="value" />
          <variable line="305" name="make_minute_timedelta" />
        </scope>
        <scope doc="Windows Platform SDK GetTimeZoneInformation" ilk="function" line="310" lineend="313" name="current" returns="tuple" signature="current()">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="class_" />
        </scope>
        <scope ilk="function" line="326" lineend="327" name="locate_standard_start" returns="self._locate_day()" signature="locate_standard_start(year)">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
        </scope>
        <scope ilk="function" line="319" lineend="321" name="copy" returns="self.__class__()" signature="copy()">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" doc="Takes a SYSTEMTIME object, such as retrieved from a TIME_ZONE_INFORMATION structure or call to GetTimeZoneInformation and interprets it based on the given year to identify the actual day." ilk="function" line="330" lineend="367" name="_locate_day" returns="datetime.datetime()" signature="_locate_day(cutoff)">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="year" />
          <variable ilk="argument" name="cutoff" />
          <variable citdl="cutoff.day_of_week" line="349" name="target_weekday" />
          <variable citdl="cutoff.day" line="352" name="week_of_month" />
          <variable citdl="cutoff.day" line="354" name="day" />
          <variable citdl="datetime.datetime()" line="355" name="result" />
          <variable citdl="result.weekday()" line="358" name="days_to_go" />
        </scope>
        <scope attributes="__ctor__" doc="Try to construct a TimeZoneDefinition from a) [DYNAMIC_]TIME_ZONE_INFORMATION args b) another TimeZoneDefinition c) a byte structure (using _from_bytes)" ilk="function" line="253" lineend="278" name="__init__" signature="TimeZoneDefinition(*args, **kwargs)">
          <variable citdl="TimeZoneDefinition" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
        </scope>
      </scope>
      <scope classrefs="tzinfo" doc="Main class for handling Windows time zones. Usage:         TimeZoneInfo(&lt;Time Zone Standard Name&gt;, [&lt;Fix Standard Time&gt;])" ilk="class" line="369" lineend="611" name="TimeZoneInfo">
        <variable attributes="__instancevar__" citdl="False" line="389" name="fixedStandardTime" />
        <scope attributes="protected" ilk="function" line="423" lineend="434" name="_LoadDynamicInfoFromKey" signature="_LoadDynamicInfoFromKey(key)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
          <variable citdl="key.subkey()" line="425" name="info" />
          <variable citdl="map()" line="430" name="years" />
          <variable citdl="map()" line="431" name="values" />
        </scope>
        <scope ilk="function" line="443" lineend="444" name="__str__" returns="str" signature="__str__()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="416" lineend="421" name="_LoadFromTZI" signature="_LoadFromTZI(tzi)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="tzi" />
        </scope>
        <scope doc="Given a year, determines the time when daylight savings time starts" ilk="function" line="504" lineend="506" name="GetDSTStartTime" signature="GetDSTStartTime(year)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
        </scope>
        <scope doc="Return the time zones sorted by some key." ilk="function" line="600" lineend="611" name="get_sorted_time_zones" returns="get_all_time_zones()" signature="get_sorted_time_zones()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="key" />
          <variable citdl="get_all_time_zones()" line="609" name="zones" />
        </scope>
        <scope ilk="function" line="512" lineend="513" name="__cmp__" returns="cmp()" signature="__cmp__(other)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope attributes="protected" ilk="function" line="466" lineend="468" name="_getDaylightBias" returns="winInfo.bias" signature="_getDaylightBias(dt)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="dt" />
          <variable citdl="getWinInfo()" line="467" name="winInfo" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="383" lineend="389" name="__init__" signature="TimeZoneInfo(param=None, fix_standard_time=False)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="param" />
          <variable citdl="False" ilk="argument" name="fix_standard_time" />
        </scope>
        <scope doc="Given a year, determines the time when daylight savings ends." ilk="function" line="508" lineend="510" name="GetDSTEndTime" signature="GetDSTEndTime(year)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="year" />
        </scope>
        <scope doc="Calculates the daylight savings offset according to the datetime.tzinfo spec" ilk="function" line="476" lineend="484" name="dst" returns="winInfo.standard_bias" signature="dst(dt)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="dt" />
          <variable citdl="getWinInfo()" line="479" name="winInfo" />
          <variable citdl="winInfo.daylight_bias" line="481" name="result" />
        </scope>
        <scope attributes="protected" ilk="function" line="486" lineend="502" name="_inDaylightSavings" returns="bool" signature="_inDaylightSavings(dt)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="dt" />
          <variable citdl="self.GetDSTStartTime()" line="488" name="dstStart" />
          <variable citdl="self.GetDSTEndTime()" line="489" name="dstEnd" />
          <variable citdl="bool" line="492" name="inDaylightSavings" />
        </scope>
        <variable attributes="__instancevar__" citdl="RangeMap()" line="434" name="dynamicInfo" />
        <variable attributes="__instancevar__" citdl="TimeZoneDefinition" line="413" name="staticInfo" />
        <scope doc="Returns the local time zone as defined by the operating system in the registry." ilk="function" line="522" lineend="546" name="local" returns="TimeZoneInfo.local.class_()" signature="local()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="class_" />
          <variable citdl="bool" line="542" name="fix_standard_time" />
        </scope>
        <scope attributes="protected" doc="Get the names of the registry keys indexed by a value in that key." ilk="function" line="577" lineend="586" name="_get_indexed_time_zone_keys" returns="zip()" signature="_get_indexed_time_zone_keys()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="index_key" />
          <variable citdl="list()" line="581" name="key_names" />
          <scope ilk="function" line="582" lineend="584" name="get_index_value" signature="get_index_value(key_name)">
            <variable ilk="argument" name="key_name" />
            <variable citdl="_get_time_zone_key()" line="583" name="key" />
          </scope>
          <variable citdl="map()" line="585" name="values" />
        </scope>
        <scope ilk="function" line="436" lineend="441" name="__repr__" returns="tuple" signature="__repr__()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable citdl="str" line="437" name="result" />
        </scope>
        <scope ilk="function" line="518" lineend="519" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="tzi.daylight_name" line="412" name="daylightName" />
        <variable attributes="__instancevar__" citdl="tzi.standard_name" line="387" name="timeZoneName" />
        <variable citdl="str" line="381" name="tzRegKey" />
        <scope doc="Returns a time-zone representing UTC." ilk="function" line="549" lineend="560" name="utc" returns="class_._tzutc" signature="utc()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="class_" />
        </scope>
        <scope ilk="function" line="596" lineend="597" name="get_all_time_zones" returns="list" signature="get_all_time_zones()" />
        <scope doc="Calculates the utcoffset according to the datetime.tzinfo spec" ilk="function" line="470" lineend="474" name="utcoffset" returns="self.dst()" signature="utcoffset(dt)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="dt" />
          <variable citdl="getWinInfo()" line="473" name="winInfo" />
        </scope>
        <scope attributes="protected" doc="Returns the names of the (registry keys of the) time zones" ilk="function" line="572" lineend="574" name="_get_time_zone_key_names" signature="_get_time_zone_key_names()" />
        <scope ilk="function" line="515" lineend="516" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <variable attributes="__instancevar__" citdl="tzi.standard_name" line="411" name="standardName" />
        <scope attributes="protected" doc="Find the registry key for the time zone name (self.timeZoneName)." ilk="function" line="391" lineend="404" name="_FindTimeZoneKey" returns="key.subkey()" signature="_FindTimeZoneKey()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable citdl="dict()" line="395" name="zoneNames" />
          <variable citdl="zoneNames.get()" line="398" name="timeZoneName" />
          <variable citdl="_RegKeyDict.open()" line="399" name="key" />
          <variable citdl="key.subkey()" line="401" name="result" />
        </scope>
        <scope attributes="protected" ilk="function" line="462" lineend="464" name="_getStandardBias" returns="winInfo.standard_bias" signature="_getStandardBias(dt)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="dt" />
          <variable citdl="getWinInfo()" line="463" name="winInfo" />
        </scope>
        <variable attributes="__instancevar__" citdl="str" line="410" name="displayName" />
        <scope attributes="protected" doc="Return the registry key that stores time zone details" ilk="function" line="564" lineend="569" name="_get_time_zone_key" returns="key.subkey()" signature="_get_time_zone_key()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="subkey" />
          <variable citdl="_RegKeyDict.open()" line="566" name="key" />
        </scope>
        <scope ilk="function" line="454" lineend="460" name="getWinInfo" returns="self.dynamicInfo.get()" signature="getWinInfo(targetYear)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="targetYear" />
        </scope>
        <scope ilk="function" line="446" lineend="452" name="tzname" returns="tzi.standard_name" signature="tzname(dt)">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable ilk="argument" name="dt" />
          <variable citdl="self.getWinInfo()" line="447" name="winInfo" />
          <variable citdl="tzi.standard_name" line="449" name="result" />
        </scope>
        <scope attributes="protected" doc="Loads the information from an opened time zone registry key into relevant fields of this TZI object" ilk="function" line="406" lineend="414" name="_LoadInfoFromKey" signature="_LoadInfoFromKey()">
          <variable citdl="TimeZoneInfo" ilk="argument" name="self" />
          <variable citdl="_FindTimeZoneKey()" line="409" name="key" />
        </scope>
        <scope doc="Return a list of time zone names that can be used to initialize TimeZoneInfo instances" ilk="function" line="589" lineend="593" name="get_sorted_time_zone_names" returns="list" signature="get_sorted_time_zone_names()">
          <variable citdl="TimeZoneInfo.get_sorted_time_zones()" line="591" name="tzs" />
          <variable line="592" name="get_standard_name" />
        </scope>
      </scope>
      <variable citdl="str" line="155" name="__author__" />
      <variable citdl="str" line="158" name="__date__" />
      <variable citdl="str" line="157" name="__sccauthor__" />
      <variable citdl="str" line="156" name="__version__" />
      <scope ilk="function" line="736" name="ascending" signature="ascending(a, b)" />
      <scope classrefs="object" doc="count(start=0, step=1]) --&gt; count object  Return a count object whose .__next__() method returns consecutive values." ilk="class" name="count" />
      <import module="datetime" />
      <scope doc="This is a decorator which can be used to mark functions as deprecated." ilk="function" line="651" lineend="662" name="deprecated" returns="deprecated.newFunc" signature="deprecated(func, name=&apos;Unknown&apos;)">
        <variable citdl="str" ilk="argument" name="name" />
        <variable ilk="argument" name="func" />
        <scope ilk="function" line="655" lineend="658" name="newFunc" returns="deprecated.func()" signature="newFunc(*args, **kwargs)">
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kwargs" />
          <variable citdl="func.__name__" line="659" name="__name__" />
          <variable citdl="func.__doc__" line="660" name="__doc__" />
        </scope>
      </scope>
      <scope ilk="function" line="737" lineend="738" name="descending" returns="bool" signature="descending(a, b)">
        <variable ilk="argument" name="a" />
        <variable ilk="argument" name="b" />
      </scope>
      <variable citdl="_Feature" name="generators" />
      <variable citdl="Logger" line="172" name="log" />
      <import module="logging" />
      <scope doc="Return the local time now with timezone awareness as enabled by this module &gt;&gt;&gt; now_local = now()" ilk="function" line="679" lineend="685" name="now" returns="datetime.datetime.now()" signature="now()" />
      <import module="operator" />
      <import module="os" />
      <import module="re" />
      <scope doc="Resolve a multilingual user interface resource for the time zone name &gt;&gt;&gt; #some pre-amble for the doc-tests to be py2k and py3k aware) &gt;&gt;&gt; try: unicode and None ..." ilk="function" line="709" lineend="732" name="resolveMUITimeZone" returns="win32api.LoadString()" signature="resolveMUITimeZone(spec)">
        <variable citdl="re.compile()" line="723" name="pattern" />
        <variable ilk="argument" name="spec" />
        <variable line="728" name="handle" />
        <variable citdl="win32api.LoadString()" line="729" name="result" />
        <variable citdl="pattern.match()" line="724" name="matcher" />
      </scope>
      <import module="struct" />
      <import module="sys" />
      <scope doc="Return the UTC time now with timezone awareness as enabled by this module &gt;&gt;&gt; now = utcnow()" ilk="function" line="669" lineend="677" name="utcnow" returns="datetime.datetime.utcnow()" signature="utcnow()">
        <variable citdl="now.replace()" line="675" name="now" />
      </scope>
      <import module="warnings" />
      <import module="win32api" />
      <import module="winreg" />
      <scope attributes="protected __hidden__" classrefs="dict" ilk="class" line="613" lineend="647" name="_RegKeyDict">
        <scope attributes="__ctor__" ilk="function" line="614" lineend="617" name="__init__" signature="_RegKeyDict(key)">
          <variable citdl="_RegKeyDict" ilk="argument" name="self" />
          <variable ilk="argument" name="key" />
        </scope>
        <variable attributes="__instancevar__" line="616" name="key" />
        <scope ilk="function" line="620" lineend="621" name="open" returns="_RegKeyDict" signature="open(*args, **kargs)">
          <variable citdl="_RegKeyDict" ilk="argument" name="cls" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kargs" />
        </scope>
        <scope ilk="function" line="623" lineend="624" name="subkey" returns="_RegKeyDict" signature="subkey(name)">
          <variable citdl="_RegKeyDict" ilk="argument" name="self" />
          <variable ilk="argument" name="name" />
        </scope>
        <scope attributes="private" ilk="function" line="626" lineend="628" name="__load_values" signature="__load_values()">
          <variable citdl="_RegKeyDict" ilk="argument" name="self" />
          <variable citdl="list" line="627" name="pairs" />
        </scope>
        <scope ilk="function" line="630" lineend="631" name="subkeys" returns="self._enumerate_reg_keys()" signature="subkeys()">
          <variable citdl="_RegKeyDict" ilk="argument" name="self" />
        </scope>
        <scope attributes="protected" ilk="function" line="634" lineend="635" name="_enumerate_reg_values" returns="_RegKeyDict._enumerate_reg()" signature="_enumerate_reg_values()">
          <variable citdl="_RegKeyDict" ilk="argument" name="key" />
        </scope>
        <scope attributes="protected" ilk="function" line="638" lineend="639" name="_enumerate_reg_keys" returns="_RegKeyDict._enumerate_reg()" signature="_enumerate_reg_keys()">
          <variable citdl="_RegKeyDict" ilk="argument" name="key" />
        </scope>
        <scope attributes="protected" doc="Enumerates an open registry key as an iterable generator" ilk="function" line="642" lineend="647" name="_enumerate_reg" signature="_enumerate_reg(func)">
          <variable citdl="_RegKeyDict" ilk="argument" name="key" />
          <variable ilk="argument" name="func" />
        </scope>
      </scope>
      <scope attributes="protected __hidden__" classrefs="object" ilk="class" line="176" lineend="212" name="_SimpleStruct">
        <variable attributes="protected" line="177" name="_fields_" />
        <scope attributes="__ctor__" ilk="function" line="178" lineend="196" name="__init__" signature="_SimpleStruct(*args, **kw)">
          <variable citdl="_SimpleStruct" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
          <variable attributes="kwargs" ilk="argument" name="kw" />
          <variable citdl="tuple" line="180" name="def_arg" />
          <variable citdl="typ()" line="193" name="def_val" />
        </scope>
        <scope ilk="function" line="198" lineend="199" name="field_names" returns="list" signature="field_names()">
          <variable citdl="_SimpleStruct" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="201" lineend="209" name="__eq__" returns="bool" signature="__eq__(other)">
          <variable citdl="_SimpleStruct" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
        <scope ilk="function" line="211" lineend="212" name="__ne__" returns="bool" signature="__ne__(other)">
          <variable citdl="_SimpleStruct" ilk="argument" name="self" />
          <variable ilk="argument" name="other" />
        </scope>
      </scope>
    </scope>
    