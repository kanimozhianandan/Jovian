<scope doc="General Server side utilities" ilk="blob" lang="Python3" name="win32com.server.util">
      <scope classrefs="com_error" doc="An Exception object that is understood by the framework.  If the framework is presented with an exception of type class," ilk="class" name="COMException" />
      <scope classrefs="object" doc="A collection of VARIANT values." ilk="class" line="123" lineend="174" name="Collection">
        <scope ilk="function" line="154" lineend="155" name="Count" returns="len()" signature="Count()">
          <variable citdl="Collection" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="166" lineend="171" name="Insert" signature="Insert(index, value)">
          <variable citdl="Collection" ilk="argument" name="self" />
          <variable citdl="int()" ilk="argument" name="index" />
          <variable ilk="argument" name="value" />
        </scope>
        <scope attributes="protected" ilk="function" line="173" lineend="174" name="_NewEnum" returns="NewEnum()" signature="_NewEnum()">
          <variable citdl="Collection" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected" citdl="list" line="126" name="_public_methods_" />
        <scope ilk="function" line="160" lineend="164" name="Remove" signature="Remove(index)">
          <variable citdl="Collection" ilk="argument" name="self" />
          <variable ilk="argument" name="index" />
        </scope>
        <scope ilk="function" line="142" lineend="149" name="Item" signature="Item(*args)">
          <variable citdl="Collection" ilk="argument" name="self" />
          <variable attributes="varargs" ilk="argument" name="args" />
        </scope>
        <scope ilk="function" line="157" lineend="158" name="Add" signature="Add(value)">
          <variable citdl="Collection" ilk="argument" name="self" />
          <variable ilk="argument" name="value" />
        </scope>
        <variable attributes="protected" citdl="Collection.Item" line="152" name="_value_" />
        <variable attributes="__instancevar__" citdl="list" line="131" name="data" />
        <scope attributes="__ctor__" ilk="function" line="128" lineend="136" name="__init__" signature="Collection(data=None, readOnly=0)">
          <variable citdl="Collection" ilk="argument" name="self" />
          <variable citdl="list" ilk="argument" name="data" />
          <variable citdl="int" ilk="argument" name="readOnly" />
        </scope>
      </scope>
      <scope classrefs="object" ilk="class" line="191" lineend="220" name="FileStream">
        <variable attributes="protected" citdl="list" line="192" name="_public_methods_" />
        <scope ilk="function" line="198" lineend="199" name="Read" returns="self.file.read()" signature="Read(amount)">
          <variable citdl="FileStream" ilk="argument" name="self" />
          <variable ilk="argument" name="amount" />
        </scope>
        <scope ilk="function" line="205" lineend="206" name="Clone" returns="self._wrap()" signature="Clone()">
          <variable citdl="FileStream" ilk="argument" name="self" />
        </scope>
        <scope ilk="function" line="201" lineend="203" name="Write" returns="len()" signature="Write(data)">
          <variable citdl="FileStream" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
        </scope>
        <scope ilk="function" line="208" lineend="212" name="CopyTo" returns="tuple" signature="CopyTo(dest, cb)">
          <variable citdl="FileStream" ilk="argument" name="self" />
          <variable ilk="argument" name="dest" />
          <variable ilk="argument" name="cb" />
          <variable citdl="self.file.read()" line="209" name="data" />
          <variable citdl="len()" line="210" name="cbread" />
        </scope>
        <variable attributes="protected" citdl="list" line="193" name="_com_interfaces_" />
        <variable attributes="__instancevar__" line="196" name="file" />
        <scope attributes="protected" ilk="function" line="219" lineend="220" name="_wrap" returns="wrap()" signature="_wrap(ob)">
          <variable citdl="FileStream" ilk="argument" name="self" />
          <variable ilk="argument" name="ob" />
        </scope>
        <scope ilk="function" line="214" lineend="217" name="Seek" returns="self.file.tell()" signature="Seek(offset, origin)">
          <variable citdl="FileStream" ilk="argument" name="self" />
          <variable ilk="argument" name="offset" />
          <variable ilk="argument" name="origin" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="195" lineend="196" name="__init__" signature="FileStream(file)">
          <variable citdl="FileStream" ilk="argument" name="self" />
          <variable ilk="argument" name="file" />
        </scope>
      </scope>
      <scope classrefs="object" doc="A class to expose a Python sequence as an EnumVARIANT.  Create an instance of this class passing a sequence (list, tuple, or" ilk="class" line="46" lineend="84" name="ListEnumerator">
        <scope ilk="function" line="77" lineend="78" name="Reset" signature="Reset()">
          <variable citdl="ListEnumerator" ilk="argument" name="self" />
        </scope>
        <variable attributes="__instancevar__" citdl="int" line="60" name="index" />
        <variable attributes="protected" citdl="list" line="56" name="_public_methods_" />
        <scope ilk="function" line="71" lineend="75" name="Skip" signature="Skip(count)">
          <variable citdl="ListEnumerator" ilk="argument" name="self" />
          <variable ilk="argument" name="count" />
          <variable citdl="int" line="72" name="end" />
        </scope>
        <scope ilk="function" line="80" lineend="81" name="Clone" returns="self._wrap()" signature="Clone()">
          <variable citdl="ListEnumerator" ilk="argument" name="self" />
        </scope>
        <variable attributes="protected __instancevar__" citdl="pythoncom.IID_IEnumVARIANT" line="61" name="_iid_" />
        <scope ilk="function" line="66" lineend="69" name="Next" returns="list" signature="Next(count)">
          <variable citdl="ListEnumerator" ilk="argument" name="self" />
          <variable ilk="argument" name="count" />
          <variable citdl="list" line="67" name="result" />
        </scope>
        <variable attributes="protected __instancevar__" line="59" name="_list_" />
        <scope attributes="protected" ilk="function" line="63" lineend="65" name="_query_interface_" returns="int" signature="_query_interface_(iid)">
          <variable citdl="ListEnumerator" ilk="argument" name="self" />
          <variable ilk="argument" name="iid" />
        </scope>
        <scope attributes="protected" ilk="function" line="83" lineend="84" name="_wrap" returns="wrap()" signature="_wrap(ob)">
          <variable citdl="ListEnumerator" ilk="argument" name="self" />
          <variable ilk="argument" name="ob" />
        </scope>
        <scope attributes="__ctor__" ilk="function" line="58" lineend="61" name="__init__" signature="ListEnumerator(data, index=0, iid=pythoncom.IID_IEnumVARIANT)">
          <variable citdl="ListEnumerator" ilk="argument" name="self" />
          <variable ilk="argument" name="data" />
          <variable citdl="int" ilk="argument" name="index" />
          <variable citdl="pythoncom.IID_IEnumVARIANT" ilk="argument" name="iid" />
        </scope>
      </scope>
      <scope classrefs="ListEnumerator" doc="A List Enumerator which wraps a sequence&apos;s items in gateways.  If a sequence contains items (objects) that have not been wrapped for" ilk="class" line="87" lineend="100" name="ListEnumeratorGateway">
        <scope ilk="function" line="97" lineend="100" name="Next" returns="map()" signature="Next(count)">
          <variable citdl="ListEnumeratorGateway" ilk="argument" name="self" />
          <variable ilk="argument" name="count" />
          <variable citdl="list" line="98" name="result" />
        </scope>
      </scope>
      <scope doc="Creates a new COM collection object" ilk="function" line="176" lineend="189" name="NewCollection" returns="pythoncom.WrapObject()" signature="NewCollection(seq, cls=&lt;class &apos;win32com.server.util.Collection&apos;&gt;)">
        <variable ilk="argument" name="seq" />
        <variable citdl="Collection" ilk="argument" name="cls" />
      </scope>
      <scope doc="Creates a new enumerator COM server." ilk="function" line="103" lineend="120" name="NewEnum" returns="wrap()" signature="NewEnum(seq, cls=&lt;class &apos;win32com.server.util.ListEnumerator&apos;&gt;, iid=IID(&apos;{00020404-0000-0000-C000-000000000046}&apos;), usePolicy=None, useDispatcher=None)">
        <variable ilk="argument" name="seq" />
        <variable citdl="cls()" line="119" name="ob" />
        <variable ilk="argument" name="usePolicy" />
        <variable citdl="pythoncom.IID_IEnumVARIANT" ilk="argument" name="iid" />
        <variable ilk="argument" name="useDispatcher" />
        <variable citdl="ListEnumerator" ilk="argument" name="cls" />
      </scope>
      <import module="policy" />
      <import module="pythoncom" />
      <scope doc="Unwraps an interface." ilk="function" line="33" lineend="43" name="unwrap" returns="ob._obj_" signature="unwrap(ob)">
        <variable citdl="ob.policy" ilk="argument" name="ob" />
      </scope>
      <import module="winerror" />
      <scope doc="Wraps an object in a PyGDispatch gateway." ilk="function" line="8" lineend="31" name="wrap" returns="usePolicy()" signature="wrap(ob, iid=None, usePolicy=None, useDispatcher=None)">
        <variable ilk="argument" name="iid" />
        <variable citdl="win32com.server.dispatcher.DefaultDebugDispatcher" ilk="argument" name="useDispatcher" />
        <variable citdl="useDispatcher()" ilk="argument" name="ob" />
        <variable citdl="policy.DefaultPolicy" ilk="argument" name="usePolicy" />
      </scope>
    </scope>
    