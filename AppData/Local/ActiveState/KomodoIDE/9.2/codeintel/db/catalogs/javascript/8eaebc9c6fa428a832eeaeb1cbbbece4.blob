<scope ilk="blob" lang="JavaScript" name="Color.js">
      <variable citdl="Object" name="MochiKit">
        <variable citdl="Object" name="Color">
          <scope doc="Represents a color. Component values should be integers&#xA;between 0.0 and 1.0." ilk="class" name="Color">
            <scope attributes="__ctor__" doc="Represents a color. Component values should be integers&#xA;between 0.0 and 1.0." ilk="function" name="Color" signature="Color()" />
            <scope doc="Returns a Color object based on the background of the&#xA;provided element." ilk="function" name="fromBackground" returns="Color" signature="fromBackground(elem) =&gt; Color" />
            <scope doc="Returns a Color object based on the result of&#xA;MochiKit.Style.getStyle(elem, style) or null if not found." ilk="function" name="fromComputedStyle" returns="Color" signature="fromComputedStyle(elem, style) =&gt; Color" />
            <scope doc="Returns a Color object from the given hexadecimal color&#xA;string. For example, &quot;#FFFFFF&quot; would return a Color with RGB&#xA;values [255/255, 255/255, 255/255] (white)." ilk="function" name="fromHexString" returns="Color" signature="fromHexString(hexString) =&gt; Color" />
            <scope doc="Return a Color object from the given hue, saturation,&#xA;lightness values. Values should be numbers between 0.0 and&#xA;1.0." ilk="function" name="fromHSL" returns="Color" signature="fromHSL(hue, saturation, lightness, alpha=1.0) =&gt; Color" />
            <scope doc="Returns a Color object from the given decimal hsl color&#xA;string. For example, &quot;hsl(0,0%,100%)&quot; would return a Color&#xA;with HSL values [0/360, 0/360, 360/360] (white)." ilk="function" name="fromHSLString" returns="Color" signature="fromHSLString(hslString) =&gt; Color" />
            <scope doc="Return a Color object from the given hue, saturation, value&#xA;values. Values should be numbers between 0.0 and 1.0." ilk="function" name="fromHSV" returns="Color" signature="fromHSV(hue, saturation, value, alpha=1.0) =&gt; Color" />
            <scope doc="Returns a Color object corresponding to the given SVG 1.0&#xA;color keyword name [2] as per the W3C CSS3 Color Module [3].&#xA;&quot;transparent&quot; is also accepted as a color name, and will&#xA;return Color.transparentColor()." ilk="function" name="fromName" returns="Color" signature="fromName(colorName) =&gt; Color" />
            <scope doc="Return a Color object from the given red, green, blue, and&#xA;alpha values. Values should be numbers between 0 and 1.0." ilk="function" name="fromRGB" returns="Color" signature="fromRGB(red, green, blue, alpha=1.0) =&gt; Color" />
            <scope doc="Returns a Color object from the given decimal rgb color&#xA;string. For example, &quot;rgb(255,255,255)&quot; would return a Color&#xA;with RGB values [255/255, 255/255, 255/255] (white)." ilk="function" name="fromRGBString" returns="Color" signature="fromRGBString(rgbString) =&gt; Color" />
            <scope doc="Returns a Color object based on the text color of the&#xA;provided element." ilk="function" name="fromText" returns="Color" signature="fromText(elem) =&gt; Color" />
            <scope doc="Returns a Color object from the given RGB, HSL, hex, or&#xA;name. Will return null if the string can not be parsed by&#xA;any of these methods." ilk="function" name="fromString" returns="Color" signature="fromString(rgbOrHexString) =&gt; Color" />
            <scope doc="Returns an object with properties for each SVG 1.0 color&#xA;keyword name [2] supported by CSS3 [3]. Property names are&#xA;the color keyword name in lowercase, and the value is a&#xA;string suitable for Color.fromString()." ilk="function" name="namedColors" returns="Object" signature="namedColors() =&gt; Object" />
            <scope doc="Return a new Color based on this color, but with the&#xA;provided alpha value." ilk="function" name="colorWithAlpha" returns="Color" signature="colorWithAlpha(alpha) =&gt; Color" />
            <scope doc="Return a new Color based on this color, but with the&#xA;provided hue value." ilk="function" name="colorWithHue" returns="Color" signature="colorWithHue(hue) =&gt; Color" />
            <scope doc="Return a new Color based on this color, but with the&#xA;provided saturation value (using the HSL color model)." ilk="function" name="colorWithSaturation" returns="Color" signature="colorWithSaturation(saturation) =&gt; Color" />
            <scope doc="Return a new Color based on this color, but with the&#xA;provided lightness value." ilk="function" name="colorWithLightness" returns="Color" signature="colorWithLightness(lightness) =&gt; Color" />
            <scope doc="Return a new Color based on this color, but darker by the&#xA;given level (between 0 and 1.0)." ilk="function" name="darkerColorWithLevel" returns="Color" signature="darkerColorWithLevel(level) =&gt; Color" />
            <scope doc="Return a new Color based on this color, but lighter by the&#xA;given level (between 0 and 1.0)." ilk="function" name="lighterColorWithLevel" returns="Color" signature="lighterColorWithLevel(level) =&gt; Color" />
            <scope doc="Return a new Color whose RGBA component values are a&#xA;weighted sum of this color and other. Each component of the&#xA;returned color is the fraction of other&apos;s value plus 1 -&#xA;fraction of this color&apos;s." ilk="function" name="blendedColor" returns="Color" signature="blendedColor(other, fraction=0.5) =&gt; Color" />
            <scope doc="Return true if the lightness value of this color is greater&#xA;than 0.5. Note that alpha is ignored for this calculation&#xA;(color components are not premultiplied)." ilk="function" name="isLight" returns="Boolean" signature="isLight() =&gt; Boolean" />
            <scope doc="Return true if the lightness value of this color is less&#xA;than or equal to 0.5. Note that alpha is ignored for this&#xA;calculation (color components are not premultiplied)." ilk="function" name="isDark" returns="Boolean" signature="isDark() =&gt; Boolean" />
            <scope doc="Return the decimal &quot;rgb(red, green, blue)&quot; string&#xA;representation of this color. If the alpha component is not&#xA;1.0 (fully opaque), the &quot;rgba(red, green, blue, alpha)&quot;&#xA;string representation will be used." ilk="function" name="toRGBString" returns="String" signature="toRGBString() =&gt; String" />
            <scope doc="Return the decimal &quot;hsl(hue, saturation, lightness)&quot; string&#xA;representation of this color. If the alpha component is not&#xA;1.0 (fully opaque), the &quot;hsla(hue, saturation, lightness,&#xA;alpha)&quot; string representation will be used." ilk="function" name="toHSLString" returns="String" signature="toHSLString() =&gt; String" />
            <scope doc="Return the hexadecimal &quot;#RRGGBB&quot; string representation of&#xA;this color." ilk="function" name="toHexString" signature="toHexString()" />
            <scope doc="Return the RGB (red, green, blue, alpha) components of this&#xA;color as an object with r, g, b, and a properties that have&#xA;values between 0.0 and 1.0." ilk="function" name="asRGB" signature="asRGB()" />
            <scope doc="Return the HSL (hue, saturation, lightness, alpha)&#xA;components of this color as an object with h, s, l and a&#xA;properties that have values between 0.0 and 1.0." ilk="function" name="asHSL" signature="asHSL()" />
            <scope doc="Return the HSV (hue, saturation, value, alpha) components of&#xA;this color as an object with h, s, v and a properties that&#xA;have values between 0.0 and 1.0." ilk="function" name="asHSV" signature="asHSV()" />
            <scope doc="Return a Color object whose RGB values are 0, 0, 0&#xA;(#000000)." ilk="function" name="blackColor" returns="Color" signature="blackColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 0, 0, 1&#xA;(#0000ff)." ilk="function" name="blueColor" returns="Color" signature="blueColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 0.6, 0.4, 0.2&#xA;(#996633)." ilk="function" name="brownColor" returns="Color" signature="brownColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 0, 1, 1&#xA;(#00ffff)." ilk="function" name="cyanColor" returns="Color" signature="cyanColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 1/3, 1/3, 1/3&#xA;(#555555)." ilk="function" name="darkGrayColor" returns="Color" signature="darkGrayColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 0.5, 0.5, 0.5&#xA;(#808080)." ilk="function" name="grayColor" returns="Color" signature="grayColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 0, 1, 0.&#xA;(#00ff00)." ilk="function" name="greenColor" returns="Color" signature="greenColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 2/3, 2/3, 2/3&#xA;(#aaaaaa)." ilk="function" name="lightGrayColor" returns="Color" signature="lightGrayColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 1, 0, 1&#xA;(#ff00ff)." ilk="function" name="magentaColor" returns="Color" signature="magentaColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 1, 0.5, 0&#xA;(#ff8000)." ilk="function" name="orangeColor" returns="Color" signature="orangeColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 0.5, 0, 0.5&#xA;(#800080)." ilk="function" name="purpleColor" returns="Color" signature="purpleColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 1, 0, 0&#xA;(#ff0000)." ilk="function" name="redColor" returns="Color" signature="redColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 1, 1, 1&#xA;(#ffffff)." ilk="function" name="whiteColor" returns="Color" signature="whiteColor() =&gt; Color" />
            <scope doc="Return a Color object whose RGB values are 1, 1, 0&#xA;(#ffff00)." ilk="function" name="yellowColor" returns="Color" signature="yellowColor() =&gt; Color" />
            <scope doc="Return a Color object that is completely transparent (has&#xA;alpha component of 0)." ilk="function" name="transparentColor" returns="Color" signature="transparentColor() =&gt; Color" />
          </scope>
          <scope doc="Returns num * scale clamped between 0 and scale.&#xA;clampColorComponent is not exported by default when using&#xA;JSAN." ilk="function" name="clampColorComponent" signature="clampColorComponent(num, scale)" />
          <scope doc="Computes RGB values from the provided HSL values. The return&#xA;value is a mapping with &quot;r&quot;, &quot;g&quot;, &quot;b&quot; and &quot;a&quot; keys." ilk="function" name="hslToRGB" signature="hslToRGB(hue, saturation, lightness, alpha)" />
          <scope doc="Computes RGB values from the provided HSV values. The return&#xA;value is a mapping with &quot;r&quot;, &quot;g&quot;, &quot;b&quot; and &quot;a&quot; keys." ilk="function" name="hsvToRGB" signature="hsvToRGB(hue, saturation, value, alpha)" />
          <scope doc="Convert num to a zero padded hexadecimal digit for use in a&#xA;hexadecimal color string. Num should be an integer between 0&#xA;and 255." ilk="function" name="toColorPart" signature="toColorPart(num)" />
          <scope doc="Computes HSL values based on the provided RGB values. The&#xA;return value is a mapping with &quot;h&quot;, &quot;s&quot;, &quot;l&quot; and &quot;a&quot; keys." ilk="function" name="rgbToHSL" signature="rgbToHSL(red, green, blue, alpha)" />
          <scope doc="Computes HSV values based on the provided RGB values. The&#xA;return value is a mapping with &quot;h&quot;, &quot;s&quot;, &quot;v&quot; and &quot;a&quot; keys." ilk="function" name="rgbToHSV" signature="rgbToHSV(red, green, blue, alpha)" />
        </variable>
      </variable>
      <variable citdl="MochiKit.Color.Color" name="Color" />
      <variable citdl="MochiKit.Color.fromBackground" name="fromBackground" />
      <variable citdl="MochiKit.Color.fromComputedStyle" name="fromComputedStyle" />
      <variable citdl="MochiKit.Color.fromHexString" name="fromHexString" />
      <variable citdl="MochiKit.Color.fromHSL" name="fromHSL" />
      <variable citdl="MochiKit.Color.fromHSLString" name="fromHSLString" />
      <variable citdl="MochiKit.Color.fromHSV" name="fromHSV" />
      <variable citdl="MochiKit.Color.fromName" name="fromName" />
      <variable citdl="MochiKit.Color.fromRGB" name="fromRGB" />
      <variable citdl="MochiKit.Color.fromRGBString" name="fromRGBString" />
      <variable citdl="MochiKit.Color.fromText" name="fromText" />
      <variable citdl="MochiKit.Color.fromString" name="fromString" />
      <variable citdl="MochiKit.Color.namedColors" name="namedColors" />
      <variable citdl="MochiKit.Color.colorWithAlpha" name="colorWithAlpha" />
      <variable citdl="MochiKit.Color.colorWithHue" name="colorWithHue" />
      <variable citdl="MochiKit.Color.colorWithSaturation" name="colorWithSaturation" />
      <variable citdl="MochiKit.Color.colorWithLightness" name="colorWithLightness" />
      <variable citdl="MochiKit.Color.darkerColorWithLevel" name="darkerColorWithLevel" />
      <variable citdl="MochiKit.Color.lighterColorWithLevel" name="lighterColorWithLevel" />
      <variable citdl="MochiKit.Color.blendedColor" name="blendedColor" />
      <variable citdl="MochiKit.Color.isLight" name="isLight" />
      <variable citdl="MochiKit.Color.isDark" name="isDark" />
      <variable citdl="MochiKit.Color.toRGBString" name="toRGBString" />
      <variable citdl="MochiKit.Color.toHSLString" name="toHSLString" />
      <variable citdl="MochiKit.Color.toHexString" name="toHexString" />
      <variable citdl="MochiKit.Color.asRGB" name="asRGB" />
      <variable citdl="MochiKit.Color.asHSL" name="asHSL" />
      <variable citdl="MochiKit.Color.asHSV" name="asHSV" />
      <variable citdl="MochiKit.Color.blackColor" name="blackColor" />
      <variable citdl="MochiKit.Color.blueColor" name="blueColor" />
      <variable citdl="MochiKit.Color.brownColor" name="brownColor" />
      <variable citdl="MochiKit.Color.cyanColor" name="cyanColor" />
      <variable citdl="MochiKit.Color.darkGrayColor" name="darkGrayColor" />
      <variable citdl="MochiKit.Color.grayColor" name="grayColor" />
      <variable citdl="MochiKit.Color.greenColor" name="greenColor" />
      <variable citdl="MochiKit.Color.lightGrayColor" name="lightGrayColor" />
      <variable citdl="MochiKit.Color.magentaColor" name="magentaColor" />
      <variable citdl="MochiKit.Color.orangeColor" name="orangeColor" />
      <variable citdl="MochiKit.Color.purpleColor" name="purpleColor" />
      <variable citdl="MochiKit.Color.redColor" name="redColor" />
      <variable citdl="MochiKit.Color.whiteColor" name="whiteColor" />
      <variable citdl="MochiKit.Color.yellowColor" name="yellowColor" />
      <variable citdl="MochiKit.Color.transparentColor" name="transparentColor" />
      <variable citdl="MochiKit.Color.clampColorComponent" name="clampColorComponent" />
      <variable citdl="MochiKit.Color.hslToRGB" name="hslToRGB" />
      <variable citdl="MochiKit.Color.hsvToRGB" name="hsvToRGB" />
      <variable citdl="MochiKit.Color.toColorPart" name="toColorPart" />
      <variable citdl="MochiKit.Color.rgbToHSL" name="rgbToHSL" />
      <variable citdl="MochiKit.Color.rgbToHSV" name="rgbToHSV" />
    </scope>
  