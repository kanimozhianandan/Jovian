<scope ilk="blob" lang="JavaScript" name="DOM.js">
      <variable citdl="Object" name="MochiKit">
        <variable citdl="Object" name="DOM">
          <scope doc="An alias for getElement(id[, ...]) Availability: Available&#xA;in MochiKit 1.3.1+" ilk="function" name="$" signature="$(id[, ...])" />
          <scope doc="Ensure that the given element has className set as part of&#xA;its class attribute. This will not disturb other class&#xA;names." ilk="function" name="addElementClass" signature="addElementClass(element, className)" />
          <scope doc="Note that addLoadEvent can not be used in combination with&#xA;MochiKit.Signal if the onload event is connected. Once an&#xA;event is connected with MochiKit.Signal, no other APIs may&#xA;be used for that same event." ilk="function" name="addLoadEvent" signature="addLoadEvent(func)" />
          <scope doc="Note that addToCallStack is not compatible with&#xA;MochiKit.Signal. Once an event is connected with&#xA;MochiKit.Signal, no other APIs may be used for that same&#xA;event." ilk="function" name="addToCallStack" signature="addToCallStack(target, path, func[, once])" />
          <scope doc="Append children to a DOM element using the DOM Coercion&#xA;Rules. node: A reference to the DOM element to add children&#xA;to (if a string is given, getElement(node) will be used to&#xA;locate the node) childNode...: All additional arguments, if&#xA;any, will be coerced into DOM nodes that are appended as&#xA;children using the DOM Coercion Rules." ilk="function" name="appendChildNodes" signature="appendChildNodes(node[, childNode[, ...]])" />
          <scope doc="Insert children into the DOM structure using the DOM&#xA;Coercion Rules. node: A reference to the DOM element you&#xA;want to insert children before (if a string is given,&#xA;getElement(node) will be used to locate the node)&#xA;siblingNode...: All additional arguments, if any, will be&#xA;coerced into DOM nodes that are inserted as siblings using&#xA;the DOM Coercion Rules." ilk="function" name="insertSiblingNodesBefore" signature="insertSiblingNodesBefore(node[, siblingNode[, ...]])" />
          <scope doc="Insert children into the DOM structure using the DOM&#xA;Coercion Rules. node: A reference to the DOM element you&#xA;want to insert children after (if a string is given,&#xA;getElement(node) will be used to locate the node)&#xA;siblingNode...: All additional arguments, if any, will be&#xA;coerced into DOM nodes that are inserted as siblings using&#xA;the DOM Coercion Rules." ilk="function" name="insertSiblingNodesAfter" signature="insertSiblingNodesAfter(node[, siblingNode[, ...]])" />
          <scope doc="Create a DOM fragment in a really convenient manner, much&#xA;like Nevow`s [1] stan [2]. Partially applied versions of&#xA;this function for common tags are available as aliases: A&#xA;BUTTON BR CANVAS DD DIV DL DT FIELDSET FORM H1 H2 H3 H4 H5&#xA;H6 HR IMG INPUT LABEL LEGEND LI OL OPTGROUP OPTION P PRE&#xA;SELECT SPAN STRONG TABLE TBODY TD TEXTAREA TFOOT TH THEAD TR&#xA;TT UL See Creating DOM Element Trees for a comprehensive&#xA;example." ilk="function" name="createDOM" signature="createDOM(name[, attrs[, node[, ...]]])" />
          <scope doc="Convenience function to create a partially applied createDOM&#xA;function. You&apos;d want to use this if you add additional&#xA;convenience functions for creating tags, or if you find&#xA;yourself creating a lot of tags with a bunch of the same&#xA;attributes or contents." ilk="function" name="createDOMFunc" returns="createDOM" signature="createDOMFunc(tag[, attrs[, node[, ...]]]) =&gt; createDOM" />
          <scope doc="Return the current document DOM Context. This will always be&#xA;the same as the global document unless withDocument or&#xA;withWindow is currently executing." ilk="function" name="currentDocument" signature="currentDocument()" />
          <scope doc="Return the current window DOM Context. This will always be&#xA;the same as the global window unless withWindow is currently&#xA;executing." ilk="function" name="currentWindow" signature="currentWindow()" />
          <scope doc="Convert a DOM tree to an Array of HTML string fragments.&#xA;This should be used for debugging/testing purposes only." ilk="function" name="emitHTML" signature="emitHTML(dom[, lst])" />
          <scope doc="Make a string safe for HTML, converting the usual suspects&#xA;(&lt;, &gt;, &quot;, &amp;) to their HTML character entity equivalents." ilk="function" name="escapeHTML" signature="escapeHTML(s)" />
          <scope doc="Note that focusOnLoad can not be used in combination with&#xA;MochiKit.Signal if the onload event is connected. Once an&#xA;event is connected with MochiKit.Signal, no other APIs may&#xA;be used for that same event." ilk="function" name="focusOnLoad" signature="focusOnLoad(element)" />
          <scope doc="Search the DOM tree, starting at elem, for any elements with&#xA;a name and value attribute. Return a 2-element Array of&#xA;names and values suitable for use with&#xA;MochiKit.Base.queryString." ilk="function" name="formContents" signature="formContents(elem=document.body)" />
          <scope doc="A small quick little function to encapsulate the&#xA;getElementById method. It includes a check to ensure we can&#xA;use that method." ilk="function" name="getElement" signature="getElement(id[, ...])" />
          <scope doc="Returns an array of elements in parent that match the tag&#xA;name and class name provided. If parent is a string, it will&#xA;be looked up with getElement." ilk="function" name="getElementsByTagAndClassName" returns="Array" signature="getElementsByTagAndClassName(tagName, className, parent=document) =&gt; Array" />
          <scope doc="Return the first element in parent that matches the tag name&#xA;and class name provided. If parent is a string, it will be&#xA;looked up with getElement." ilk="function" name="getFirstElementByTagAndClassName" signature="getFirstElementByTagAndClassName(tagName, className, parent=document)" />
          <scope doc="Returns the first parent of elem that matches the tag name&#xA;and class name provided. If elem is a string, it will be&#xA;looked up using getElement." ilk="function" name="getFirstParentByTagAndClassName" signature="getFirstParentByTagAndClassName(elem, tagName=&apos;*&apos;, className=null)" />
          <scope doc="Get the value of the given attribute for a DOM element&#xA;without ever raising an exception (will return null on&#xA;exception). node: A reference to the DOM element to update&#xA;(if a string is given, getElement(node) will be used to&#xA;locate the node) attr: The name of the attribute Note that&#xA;it will do the right thing for IE, so don&apos;t do the class -&gt;&#xA;className hack yourself." ilk="function" name="getNodeAttribute" signature="getNodeAttribute(node, attr)" />
          <scope doc="Return true if className is found on the element. element is&#xA;looked up with getElement, so string identifiers are also&#xA;acceptable." ilk="function" name="hasElementClass" returns="Boolean" signature="hasElementClass(element, className[, ...]) =&gt; Boolean" />
          <scope doc="Determine whether node is a child node or decendant node of&#xA;maybeParent. Returns true if so, and false if not." ilk="function" name="isChildNode" signature="isChildNode(node, maybeParent)" />
          <scope doc="Register an adapter to convert objects that match check(obj,&#xA;ctx) to a DOM element, or something that can be converted to&#xA;a DOM element (i.e. number, bool, string, function,&#xA;iterable)." ilk="function" name="registerDOMConverter" signature="registerDOMConverter(name, check, wrap[, override])" />
          <scope doc="Remove and return node from a DOM tree." ilk="function" name="removeElement" signature="removeElement(node)" />
          <scope doc="Ensure that the given element does not have className set as&#xA;part of its class attribute. This will not disturb other&#xA;class names." ilk="function" name="removeElementClass" signature="removeElementClass(element, className)" />
          <scope doc="Remove all text node children that contain only whitespace&#xA;from node. Useful in situations where such empty text nodes&#xA;can interfere with DOM traversal." ilk="function" name="removeEmptyTextNodes" signature="removeEmptyTextNodes(node)" />
          <scope doc="Remove all children from the given DOM element, then append&#xA;any given childNodes to it (by calling appendChildNodes).&#xA;node: A reference to the DOM element to add children to (if&#xA;a string is given, getElement(node) will be used to locate&#xA;the node) childNode...: All additional arguments, if any,&#xA;will be coerced into DOM nodes that are appended as children&#xA;using the DOM Coercion Rules." ilk="function" name="replaceChildNodes" signature="replaceChildNodes(node[, childNode[, ...]])" />
          <scope doc="Walk a DOM tree in-order and scrape all of the text out of&#xA;it as a string. If asArray is true, then an Array will be&#xA;returned with each individual text node." ilk="function" name="scrapeText" signature="scrapeText(node[, asArray=false])" />
          <scope doc="Set the entire class attribute of element to className.&#xA;element is looked up with getElement, so string identifiers&#xA;are also acceptable." ilk="function" name="setElementClass" signature="setElementClass(element, className)" />
          <scope doc="Set the value of the given attribute for a DOM element&#xA;without ever raising an exception (will return null on&#xA;exception). If setting more than one attribute, you should&#xA;use updateNodeAttributes." ilk="function" name="setNodeAttribute" signature="setNodeAttribute(node, attr, value)" />
          <scope doc="Replace dest in a DOM tree with src, returning src. dest: a&#xA;DOM element (or string id of one) to be replaced src: the&#xA;DOM element (or string id of one) to replace it with, or&#xA;null if dest is to be removed (replaced with nothing)." ilk="function" name="swapDOM" signature="swapDOM(dest, src)" />
          <scope doc="If fromClass is set on element, replace it with toClass.&#xA;This will not disturb other classes on that element." ilk="function" name="swapElementClass" signature="swapElementClass(element, fromClass, toClass)" />
          <scope doc="Toggle the presence of a given className in the class&#xA;attribute of all given elements. All elements will be looked&#xA;up with getElement, so string identifiers are acceptable." ilk="function" name="toggleElementClass" signature="toggleElementClass(className[, element[, ...]])" />
          <scope doc="Convert a DOM tree to a HTML string using emitHTML. This&#xA;should be used for debugging/testing purposes only." ilk="function" name="toHTML" signature="toHTML(dom)" />
          <scope doc="Update the attributes of a DOM element from a given object.&#xA;node: A reference to the DOM element to update (if a string&#xA;is given, getElement(node) will be used to locate the node)&#xA;attrs: An object whose properties will be used to set the&#xA;attributes (e.g." ilk="function" name="updateNodeAttributes" signature="updateNodeAttributes(node, attrs)" />
          <scope doc="Call func with the window DOM Context set to win and the&#xA;document DOM Context set to win.document. When func()&#xA;returns or throws an error, the DOM Context will be restored&#xA;to its previous state." ilk="function" name="withWindow" signature="withWindow(win, func)" />
          <scope doc="Call func with the doc DOM Context set to doc. When func()&#xA;returns or throws an error, the DOM Context will be restored&#xA;to its previous state." ilk="function" name="withDocument" signature="withDocument(doc, func)" />
          <scope doc="Looks up a CSS property for the given element. The element&#xA;can be specified as either a string with the element&apos;s ID or&#xA;the element object itself." ilk="function" name="computedStyle" signature="computedStyle(htmlElement, cssProperty, mozillaEquivalentCSS)" />
          <scope doc="Return the absolute pixel width and height (including&#xA;padding and border, but not margins) of element as an object&#xA;with w and h properties, or undefined if element is not in&#xA;the document. element may be specified as a string to be&#xA;looked up with getElement, a DOM element, or trivially as an&#xA;object with w and/or h properties." ilk="function" name="elementDimensions" signature="elementDimensions(element)" />
          <scope doc="Return the absolute pixel position of element in the&#xA;document as an object with x and y properties, or undefined&#xA;if element is not in the document. element may be specified&#xA;as a string to be looked up with getElement, a DOM element,&#xA;or trivially as an object with x and/or y properties." ilk="function" name="elementPosition" signature="elementPosition(element[, relativeTo={x: 0, y: 0}])" />
          <scope doc="Return the pixel width and height of the viewport as an&#xA;object with w and h properties. element is looked up with&#xA;getElement, so string identifiers are also acceptable." ilk="function" name="getViewportDimensions" signature="getViewportDimensions()" />
          <scope doc="Partial form of setDisplayForElement, specifically:&#xA;partial(setDisplayForElement, &quot;none&quot;) For information about&#xA;the caveats of using a style.display based show/hide&#xA;mechanism, and a CSS based alternative, see Element&#xA;Visibility." ilk="function" name="hideElement" signature="hideElement(element, ...)" />
          <scope doc="Ensure that element.style.overflow = &apos;hidden&apos;. If element is&#xA;a string, then it will be looked up with getElement." ilk="function" name="makeClipping" signature="makeClipping(element)" />
          <scope doc="Ensure that element.style.position is set to &quot;relative&quot; if&#xA;it is not set or is &quot;static&quot;. If element is a string, then&#xA;it will be looked up with getElement." ilk="function" name="makePositioned" signature="makePositioned(element)" />
          <scope doc="Sets the dimensions of element in the document from an&#xA;object with w and h properties." ilk="function" name="setElementDimensions" signature="setElementDimensions(element, dimensions[, units=&apos;px&apos;])" />
          <scope doc="Sets the absolute position of element in the document from&#xA;an object with x and y properties." ilk="function" name="setElementPosition" signature="setElementPosition(element, position[, units=&apos;px&apos;])" />
          <scope doc="Change the style.display for the given element(s). Usually&#xA;used as the partial forms: showElement(element, ...)&#xA;hideElement(element, ...) Elements are looked up with&#xA;getElement, so string identifiers are acceptable." ilk="function" name="setDisplayForElement" signature="setDisplayForElement(display, element[, ...])" />
          <scope doc="Sets opacity for element. Valid opacity values range from 0&#xA;(invisible) to 1 (opaque)." ilk="function" name="setOpacity" signature="setOpacity(element, opacity)" />
          <scope doc="Partial form of setDisplayForElement, specifically:&#xA;partial(setDisplayForElement, &quot;block&quot;) For information about&#xA;the caveats of using a style.display based show/hide&#xA;mechanism, and a CSS based alternative, see Element&#xA;Visibility." ilk="function" name="showElement" signature="showElement(element, ...)" />
          <scope doc="Restore the setting of element.style.overflow set by&#xA;makeClipping(element). If element is a string, then it will&#xA;be looked up with getElement." ilk="function" name="undoClipping" signature="undoClipping(element, overflow)" />
          <scope doc="Restore the setting of element.style.position set by&#xA;makePositioned(element). If element is a string, then it&#xA;will be looked up with getElement." ilk="function" name="undoPositioned" signature="undoPositioned(element)" />
          <scope doc="Constructs an object with x and y properties. obj.toString()&#xA;returns something like {x: 0, y: 42} for debugging." ilk="function" name="Coordinates" signature="Coordinates(x, y)" />
          <scope doc="Constructs an object with w and h properties. obj.toString()&#xA;returns something like {w: 0, h: 42} for debugging." ilk="function" name="Dimensions" signature="Dimensions(w, h)" />
        </variable>
      </variable>
      <variable citdl="MochiKit.DOM.$" name="$" />
      <variable citdl="MochiKit.DOM.addElementClass" name="addElementClass" />
      <variable citdl="MochiKit.DOM.addLoadEvent" name="addLoadEvent" />
      <variable citdl="MochiKit.DOM.addToCallStack" name="addToCallStack" />
      <variable citdl="MochiKit.DOM.appendChildNodes" name="appendChildNodes" />
      <variable citdl="MochiKit.DOM.insertSiblingNodesBefore" name="insertSiblingNodesBefore" />
      <variable citdl="MochiKit.DOM.insertSiblingNodesAfter" name="insertSiblingNodesAfter" />
      <variable citdl="MochiKit.DOM.createDOM" name="createDOM" />
      <variable citdl="MochiKit.DOM.createDOMFunc" name="createDOMFunc" />
      <variable citdl="MochiKit.DOM.currentDocument" name="currentDocument" />
      <variable citdl="MochiKit.DOM.currentWindow" name="currentWindow" />
      <variable citdl="MochiKit.DOM.emitHTML" name="emitHTML" />
      <variable citdl="MochiKit.DOM.escapeHTML" name="escapeHTML" />
      <variable citdl="MochiKit.DOM.focusOnLoad" name="focusOnLoad" />
      <variable citdl="MochiKit.DOM.formContents" name="formContents" />
      <variable citdl="MochiKit.DOM.getElement" name="getElement" />
      <variable citdl="MochiKit.DOM.getElementsByTagAndClassName" name="getElementsByTagAndClassName" />
      <variable citdl="MochiKit.DOM.getFirstElementByTagAndClassName" name="getFirstElementByTagAndClassName" />
      <variable citdl="MochiKit.DOM.getFirstParentByTagAndClassName" name="getFirstParentByTagAndClassName" />
      <variable citdl="MochiKit.DOM.getNodeAttribute" name="getNodeAttribute" />
      <variable citdl="MochiKit.DOM.hasElementClass" name="hasElementClass" />
      <variable citdl="MochiKit.DOM.isChildNode" name="isChildNode" />
      <variable citdl="MochiKit.DOM.registerDOMConverter" name="registerDOMConverter" />
      <variable citdl="MochiKit.DOM.removeElement" name="removeElement" />
      <variable citdl="MochiKit.DOM.removeElementClass" name="removeElementClass" />
      <variable citdl="MochiKit.DOM.removeEmptyTextNodes" name="removeEmptyTextNodes" />
      <variable citdl="MochiKit.DOM.replaceChildNodes" name="replaceChildNodes" />
      <variable citdl="MochiKit.DOM.scrapeText" name="scrapeText" />
      <variable citdl="MochiKit.DOM.setElementClass" name="setElementClass" />
      <variable citdl="MochiKit.DOM.setNodeAttribute" name="setNodeAttribute" />
      <variable citdl="MochiKit.DOM.swapDOM" name="swapDOM" />
      <variable citdl="MochiKit.DOM.swapElementClass" name="swapElementClass" />
      <variable citdl="MochiKit.DOM.toggleElementClass" name="toggleElementClass" />
      <variable citdl="MochiKit.DOM.toHTML" name="toHTML" />
      <variable citdl="MochiKit.DOM.updateNodeAttributes" name="updateNodeAttributes" />
      <variable citdl="MochiKit.DOM.withWindow" name="withWindow" />
      <variable citdl="MochiKit.DOM.withDocument" name="withDocument" />
      <variable citdl="MochiKit.DOM.computedStyle" name="computedStyle" />
      <variable citdl="MochiKit.DOM.elementDimensions" name="elementDimensions" />
      <variable citdl="MochiKit.DOM.elementPosition" name="elementPosition" />
      <variable citdl="MochiKit.DOM.getViewportDimensions" name="getViewportDimensions" />
      <variable citdl="MochiKit.DOM.hideElement" name="hideElement" />
      <variable citdl="MochiKit.DOM.makeClipping" name="makeClipping" />
      <variable citdl="MochiKit.DOM.makePositioned" name="makePositioned" />
      <variable citdl="MochiKit.DOM.setElementDimensions" name="setElementDimensions" />
      <variable citdl="MochiKit.DOM.setElementPosition" name="setElementPosition" />
      <variable citdl="MochiKit.DOM.setDisplayForElement" name="setDisplayForElement" />
      <variable citdl="MochiKit.DOM.setOpacity" name="setOpacity" />
      <variable citdl="MochiKit.DOM.showElement" name="showElement" />
      <variable citdl="MochiKit.DOM.undoClipping" name="undoClipping" />
      <variable citdl="MochiKit.DOM.undoPositioned" name="undoPositioned" />
      <variable citdl="MochiKit.DOM.Coordinates" name="Coordinates" />
      <variable citdl="MochiKit.DOM.Dimensions" name="Dimensions" />
    </scope>
  